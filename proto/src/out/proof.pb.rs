// This file is @generated by prost-build.
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(default)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proof {
    /// Start index of the leaves that match the queried namespace.ID.
    #[prost(int64, tag = "1")]
    pub start: i64,
    /// End index (non-inclusive) of the leaves that match the queried
    /// namespace.ID.
    #[prost(int64, tag = "2")]
    pub end: i64,
    /// Nodes hold the tree nodes necessary for the Merkle range proof.
    #[prost(bytes = "vec", repeated, tag = "3")]
    #[serde(with = "celestia_tendermint_proto::serializers::bytes::vec_base64string")]
    pub nodes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// leaf_hash contains the namespace.ID if NMT does not have it and
    /// it should be proven. leaf_hash is necessary to prove the Absence Proof.
    /// This field will be empty in case of Inclusion Proof.
    #[prost(bytes = "vec", tag = "4")]
    #[serde(with = "celestia_tendermint_proto::serializers::bytes::base64string")]
    pub leaf_hash: ::prost::alloc::vec::Vec<u8>,
    /// The is_max_namespace_ignored flag influences the calculation of the
    /// namespace ID range for intermediate nodes in the tree.
    #[prost(bool, tag = "5")]
    pub is_max_namespace_ignored: bool,
}
