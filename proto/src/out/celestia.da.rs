// This file is @generated by prost-build.
/// DataAvailabilityHeader contains the row and column roots of the erasure
/// coded version of the data in Block.Data.
/// Therefor the original Block.Data is arranged in a
/// k × k matrix, which is then "extended" to a
/// 2k × 2k matrix applying multiple times Reed-Solomon encoding.
/// For details see Section 5.2: <https://arxiv.org/abs/1809.09044>
/// or the Celestia specification:
/// <https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#availabledataheader>
/// Note that currently we list row and column roots in separate fields
/// (different from the spec).
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(default)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataAvailabilityHeader {
    /// RowRoot_j 	= root((M_{j,1} || M_{j,2} || ... || M_{j,2k} ))
    #[prost(bytes = "vec", repeated, tag = "1")]
    #[serde(with = "celestia_tendermint_proto::serializers::bytes::vec_base64string")]
    pub row_roots: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// ColumnRoot_j = root((M_{1,j} || M_{2,j} || ... || M_{2k,j} ))
    #[prost(bytes = "vec", repeated, tag = "2")]
    #[serde(with = "celestia_tendermint_proto::serializers::bytes::vec_base64string")]
    pub column_roots: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
