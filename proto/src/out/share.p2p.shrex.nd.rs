// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSharesByNamespaceRequest {
    #[prost(bytes = "vec", tag = "1")]
    pub root_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", tag = "2")]
    pub namespace: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSharesByNamespaceStatusResponse {
    #[prost(enumeration = "StatusCode", tag = "1")]
    pub status: i32,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(default)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NamespaceRowResponse {
    #[prost(bytes = "vec", repeated, tag = "1")]
    #[serde(with = "celestia_tendermint_proto::serializers::bytes::vec_base64string")]
    pub shares: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "2")]
    pub proof: ::core::option::Option<super::super::super::super::proof::pb::Proof>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StatusCode {
    Invalid = 0,
    Ok = 1,
    NotFound = 2,
    Internal = 3,
}
impl StatusCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StatusCode::Invalid => "INVALID",
            StatusCode::Ok => "OK",
            StatusCode::NotFound => "NOT_FOUND",
            StatusCode::Internal => "INTERNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVALID" => Some(Self::Invalid),
            "OK" => Some(Self::Ok),
            "NOT_FOUND" => Some(Self::NotFound),
            "INTERNAL" => Some(Self::Internal),
            _ => None,
        }
    }
}
