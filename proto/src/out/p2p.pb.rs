// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeaderRequest {
    #[prost(uint64, tag = "3")]
    pub amount: u64,
    #[prost(oneof = "header_request::Data", tags = "1, 2")]
    pub data: ::core::option::Option<header_request::Data>,
}
/// Nested message and enum types in `HeaderRequest`.
pub mod header_request {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        #[prost(uint64, tag = "1")]
        Origin(u64),
        #[prost(bytes, tag = "2")]
        Hash(::prost::alloc::vec::Vec<u8>),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeaderResponse {
    #[prost(bytes = "vec", tag = "1")]
    pub body: ::prost::alloc::vec::Vec<u8>,
    #[prost(enumeration = "StatusCode", tag = "2")]
    pub status_code: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StatusCode {
    Invalid = 0,
    Ok = 1,
    NotFound = 2,
}
impl StatusCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            StatusCode::Invalid => "INVALID",
            StatusCode::Ok => "OK",
            StatusCode::NotFound => "NOT_FOUND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INVALID" => Some(Self::Invalid),
            "OK" => Some(Self::Ok),
            "NOT_FOUND" => Some(Self::NotFound),
            _ => None,
        }
    }
}
