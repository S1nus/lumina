// This file is @generated by prost-build.
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(default)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Share {
    #[prost(bytes = "vec", tag = "1")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub proof: ::core::option::Option<super::super::super::super::proof::pb::Proof>,
    #[prost(enumeration = "Axis", tag = "3")]
    pub proof_axis: i32,
}
#[derive(::serde::Deserialize, ::serde::Serialize)]
#[serde(default)]
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BadEncoding {
    #[prost(bytes = "vec", tag = "1")]
    pub header_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub height: u64,
    #[prost(message, repeated, tag = "3")]
    pub shares: ::prost::alloc::vec::Vec<Share>,
    #[prost(uint32, tag = "4")]
    pub index: u32,
    #[prost(enumeration = "Axis", tag = "5")]
    pub axis: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Axis {
    Row = 0,
    Col = 1,
}
impl Axis {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Axis::Row => "ROW",
            Axis::Col => "COL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROW" => Some(Self::Row),
            "COL" => Some(Self::Col),
            _ => None,
        }
    }
}
